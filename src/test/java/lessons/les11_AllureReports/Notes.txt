В чем различие подходов testLambdaStep и testAnnotatedStep в классе StepTest.

Подход testAnnotatedStep хороший, когда надо начинать писать автотесты и UX (код страницы) еще не очень хороший
    Сначала создается куча Step'ов (как в классе WebSteps), в которых описываются основные возможные действия на странице.
    Плохой UI означает, что
        - было мало фронтендеров и многие компоненты переиспользовались: приходилось заполнять одну и ту же форму,
          но состоящую каждый раз из разных полей. Все это приводило к разным результатам.
          Соответственно, заполнение одной такой формы можно выделять в отдельный Step и переиспользовать в других тестах
        - было мало API, то есть все тестируется через веб-интерфейс
    В таком подходе у тестеров есть период, когда они занимаются только написанием таких Step'ов. Берутся тестовые сценарии
    на тестируемой странице с максимально разными проходами через сайт и параллельно создаются Step'ы. Это
    обеспечивает максимальное покрытие всех возможных сценариев. Потом руководству говорится, что библиотека Step'ов
    составлена, и теперь автотесты будут клепаться очень быстро.

    Благодаря такому подходу можно переиспользовать большое количество Step'ов в разных тестах. Отсюда вытекает еще один плюс -
    если тесты падают из-за какого то Step'а, то достаточно поменять код в одном месте, чтобы починились все сломанные тесты.
    То есть подход рассчитал на переиспользованность, но читаемость теста меньше.

Подход testLambdaStep лучше использовать в проекте с хорошим UX. В таком проекте с большой вероятностью мы не будем
попадать в одни и теже кнопки и формы по несколько раз. В таком проекте появился API - теперь можно большую часть функций
проверить через него. Кроме того все сложные структуры также можно создавать через API. При таком подходе переиспользуемость кода
становится близка к нулю, а читаемость теста увеличивается.

Но это два равноправных подхода, которыми пользуются в разных компаниях.

Как понять, какой подход использовать в своем проекте? Нужно начать писать автотесты, и если мы замечаем, что часто
описываем одни и теже функции по несколько раз или переиспользуем один и тот же код, то надо использовать testAnnotatedStep.
Иначе testLambdaStep.

Но это так работает, если вы пришли в опытную команду. А если вы оказались на новом проекте,
где нет автотестов, то лучше использовать testAnnotatedStep. Этот подход гарантировано приведет к результату, так как
в нем меньше вероятность накосячить. Метод testAnnotatedStep возможно избыточен, так как нужно создавать класс с самим
тестом и класс со Step'ами, но его проще контролировать, а так же мала вероятность, что новый тестировщик сможет что-то
испортить в проекте.

Подход testLambdaStep более профессиональный и подходит для более опытной команды разработчиков.
