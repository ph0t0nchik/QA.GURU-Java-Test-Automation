package lessons.les4_selenide;
* пакеты часто называются доменом компании, обычно это нужно не в коде тестов, а в коде софта,
* сделано для того, чтобы уменьшить вероятность, что на каких то серверных приложениях,
* окажутся одновременно в одной среде два одинаковых файла не только с одинаковым именем, но и
* именем пакета. Но для тестировщика этой проблемы нет, потому что тесты никогда не попадают
* на сервер в виде библиотек.
* Рекомендация: не выстаривать длинных названий пакетов. Пакеты нужны тестировщику просто для
* группировки своего кода

Перед началом автоматизации теста
1.  необходимо провести его руками, чтобы убедиться в работе теста.
2.  Параллельно можно смотреть xpath.
3.  Написать комментарий, что будем делать в тесте по шагам

Команда $ ищет первый элемент, который удовлетворяет написанному селектору
Команда $$ ищет все элементы, удовлетворяющие написанному селектору

Наш тест обычно состоит из 3 частей:
1.  ARRANGE - подготовка (мб уже опционально)
2.  ACT     - действие
3.  ASSERT  - проверка

Варинаты структур:
ARRANGE     ARRANGE
ACT         ACT
ASSERT      ACT
ACT         ASSERT
ASSERT      ACT
ACT         ASSERT
ASSERT

Поиск элемента не работает, если просто написать
$("#abc")
Поиск зарабоатет, если приписать действие: .click() OR .setValue() OR .shouldHave() OR...

Чем проще тест, тем лучше. Ну нужно использовать никакие наследования. Наследования усложняют программу,
наследования добавляют зависимости одного теста от другого, а это плохо.

Дотянется ли селенид до элемента, которого не видно, если до него не проскроллить???
    Ответ: Да, все, к чему можно проскроллить, считается видимым для селенида + когда совершаются клики или наведения,
            то оно автоматический прокролливает к нужному месту

Если нужно отловить какой то элемент, который исчезает, когда курсор мыши отводится, то можно заморозить отображение
страницы. Для этого есть два способа:
1.  Заходим на вкладку Sources в консоли браузера, наводим курсор куда нужно и жмем F8
2.  Заходим на вкладку Console и вводи команду setTimeout(function () {debugger}, 4000).
    После ввода этой команды будет 4 секунды, чтобы навести на нужный элемент, после чего страница заморозится

НЕЛЬЗЯ ДОВЕРЯТЬ ТЕСТУ, КОТОРЫЙ НИКОГДА НЕ ПАДАЛ